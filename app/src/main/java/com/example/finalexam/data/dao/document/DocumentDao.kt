package com.example.finalexam.data.dao.document

import androidx.room.Query
import com.example.finalexam.data.api.DocumentApi
import com.example.finalexam.data.response.BaseResponse
import com.example.finalexam.entity.Document
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import retrofit2.Response
//l·ªõp n√†y ch∆∞a xong
class DocumentDao(private val api: DocumentApi) {

    suspend fun getAll(): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.getAllDocuments() }
    }

    suspend fun getDocumentsByKeyword(keyword: String): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.searchDocumentByTitle(keyword) }
    }

    suspend fun getDocumentbyUserID(userId: String): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.getDocumentsByUserID(userId) }
    }

    suspend fun getDocumentsBySubject(keyword: String): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.searchDocumentBySubject(keyword) }
    }

    suspend fun getDocumentsByUniversity(keyword: String): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.searchDocumentByUniversity(keyword) }
    }
    // Th√™m method l·∫•y t√†i li·ªáu c·ªßa t√¥i
    suspend fun getMyDocuments(): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.getMyDocuments() }
    }
    // Th√™m method l·∫•y t√†i li·ªáu ƒë√£ l∆∞u
    suspend fun getSaveDocumests(): List<Document> = withContext(Dispatchers.IO) {
        safeApiCall { api.getSaveDocument() }
    }
    // H√†m ƒë·ªÉ l∆∞u t√†i li·ªáu, tr·∫£ v·ªÅ Boolean cho bi·∫øt th√†nh c√¥ng hay th·∫•t b·∫°i
    // ho·∫∑c String n·∫øu API tr·∫£ v·ªÅ m·ªôt th√¥ng b√°o.
    suspend fun saveDocument(documentId: String): Boolean = withContext(Dispatchers.IO) { // Thay ƒë·ªïi ki·ªÉu tr·∫£ v·ªÅ
        try {
            val response = api.saveDocument(documentId) // G·ªçi h√†m API
            if (response.isSuccessful) {
                val body = response.body()
                if (body?.status == 200) {
                    println("‚úÖ [DocumentDao] L∆∞u t√†i li·ªáu th√†nh c√¥ng: $documentId - ${body.data}")
                    true // Tr·∫£ v·ªÅ true n·∫øu th√†nh c√¥ng
                } else {
                    println("‚ö†Ô∏è [DocumentDao] API tr·∫£ v·ªÅ status != 200 khi l∆∞u: ${body?.status} - ${body?.message}")
                    false // Tr·∫£ v·ªÅ false n·∫øu API b√°o l·ªói
                }
            } else {
                println("‚ùå [DocumentDao] API response l·ªói khi l∆∞u: ${response.code()} - ${response.errorBody()?.string()}")
                false // Tr·∫£ v·ªÅ false n·∫øu ph·∫£n h·ªìi HTTP l·ªói
            }
        } catch (e: Exception) {
            println("üî• [DocumentDao] Exception khi g·ªçi API l∆∞u t√†i li·ªáu: ${e.message}")
            false // Tr·∫£ v·ªÅ false n·∫øu c√≥ ngo·∫°i l·ªá
        }
    }
    // --- Helper function chung ---

    private suspend fun safeApiCall(
        apiCall: suspend () -> Response<BaseResponse<DocumentListWrapper>>
    ): List<Document> {
        return try {
            val response = apiCall()
            if (response.isSuccessful) {
                val body = response.body()
                if (body?.status == 200) {
                    println("‚úÖ [safeApiCall] Success - d·ªØ li·ªáu: ${body.data?.documents?.size} item")
                    body.data?.documents ?: emptyList()
                } else {
                    println("‚ö†Ô∏è [safeApiCall] API tr·∫£ v·ªÅ status != 200: ${body?.status}")
                    emptyList()
                }
            } else {
                println("‚ùå [safeApiCall] API response l·ªói: ${response.code()} - ${response.errorBody()?.string()}")
                emptyList()
            }
        } catch (e: Exception) {
            println("üî• [safeApiCall] Exception khi g·ªçi API: ${e.message}")
            emptyList()
        }
    }



}
